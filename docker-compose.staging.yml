version: '3.8'

# Docker Compose configuration for STAGING environment
# Usage: docker-compose -f docker-compose.staging.yml up -d

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: prostaff-staging-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
      - ./public:/app/public:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - prostaff-staging-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: prostaff-staging-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-prostaff_staging}
      POSTGRES_USER: ${POSTGRES_USER:-prostaff_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - prostaff-staging-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-prostaff_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: prostaff-staging-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - prostaff-staging-net
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Rails API
  api:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        RAILS_ENV: staging
    container_name: prostaff-staging-api
    restart: unless-stopped
    environment:
      RAILS_ENV: staging
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      DEVISE_JWT_SECRET_KEY: ${DEVISE_JWT_SECRET_KEY}
      CORS_ORIGINS: ${CORS_ORIGINS}
      RIOT_API_KEY: ${RIOT_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: staging
      # Staging-specific settings
      RAILS_LOG_LEVEL: info
      ENABLE_SWAGGER_UI: "true"
      ENABLE_PERFORMANCE_MONITORING: "true"
    volumes:
      - ./log:/app/log
      - ./tmp:/app/tmp
      - ./public:/app/public
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prostaff-staging-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Sidekiq Background Jobs
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        RAILS_ENV: staging
    container_name: prostaff-staging-sidekiq
    restart: unless-stopped
    command: bundle exec sidekiq -C config/sidekiq.yml
    environment:
      RAILS_ENV: staging
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${SIDEKIQ_REDIS_URL}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RIOT_API_KEY: ${RIOT_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: staging
    volumes:
      - ./log:/app/log
      - ./tmp:/app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prostaff-staging-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: prostaff-staging-backup
    restart: "no"
    environment:
      PGHOST: postgres
      PGDATABASE: ${POSTGRES_DB:-prostaff_staging}
      PGUSER: ${POSTGRES_USER:-prostaff_user}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - ./backups:/backups
      - ./deploy/scripts/backup.sh:/backup.sh:ro
    networks:
      - prostaff-staging-net
    entrypoint: ["/backup.sh"]
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  prostaff-staging-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
