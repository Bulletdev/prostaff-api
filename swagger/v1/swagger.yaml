---
openapi: 3.0.1
info:
  title: ProStaff API V1
  version: v1
  description: API documentation for ProStaff - Esports Team Management Platform
  contact:
    name: ProStaff Support
    email: support@prostaff.gg
servers:
- url: http://localhost:3333
  description: Development server
- url: https://api.prostaff.gg
  description: Production server
paths:
  "/api/v1/auth/register":
    post:
      summary: Register new organization and admin user
      tags:
      - Authentication
      parameters: []
      responses:
        '201':
          description: registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        "$ref": "#/components/schemas/User"
                      organization:
                        "$ref": "#/components/schemas/Organization"
                      access_token:
                        type: string
                      refresh_token:
                        type: string
                      expires_in:
                        type: integer
        '422':
          description: validation errors
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organization:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Team Alpha
                    region:
                      type: string
                      example: BR
                    tier:
                      type: string
                      enum:
                      - amateur
                      - semi_pro
                      - professional
                      example: semi_pro
                  required:
                  - name
                  - region
                  - tier
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: admin@teamalpha.gg
                    password:
                      type: string
                      format: password
                      example: password123
                    full_name:
                      type: string
                      example: John Doe
                    timezone:
                      type: string
                      example: America/Sao_Paulo
                    language:
                      type: string
                      example: pt-BR
                  required:
                  - email
                  - password
                  - full_name
              required:
              - organization
              - user
  "/api/v1/auth/login":
    post:
      summary: Login user
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        "$ref": "#/components/schemas/User"
                      organization:
                        "$ref": "#/components/schemas/Organization"
                      access_token:
                        type: string
                      refresh_token:
                        type: string
                      expires_in:
                        type: integer
        '401':
          description: invalid credentials
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: admin@teamalpha.gg
                password:
                  type: string
                  format: password
                  example: password123
              required:
              - email
              - password
  "/api/v1/auth/refresh":
    post:
      summary: Refresh access token
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                      refresh_token:
                        type: string
                      expires_in:
                        type: integer
        '401':
          description: invalid refresh token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiJ9...
              required:
              - refresh_token
  "/api/v1/auth/me":
    get:
      summary: Get current user info
      tags:
      - Authentication
      security:
      - bearerAuth: []
      responses:
        '200':
          description: user info retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        "$ref": "#/components/schemas/User"
                      organization:
                        "$ref": "#/components/schemas/Organization"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/auth/logout":
    post:
      summary: Logout user
      tags:
      - Authentication
      security:
      - bearerAuth: []
      responses:
        '200':
          description: logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
  "/api/v1/auth/forgot-password":
    post:
      summary: Request password reset
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
              required:
              - email
  "/api/v1/auth/reset-password":
    post:
      summary: Reset password with token
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
        '400':
          description: invalid or expired token
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: reset_token_here
                password:
                  type: string
                  format: password
                  example: newpassword123
                password_confirmation:
                  type: string
                  format: password
                  example: newpassword123
              required:
              - token
              - password
              - password_confirmation
  "/api/v1/dashboard":
    get:
      summary: Get dashboard overview
      tags:
      - Dashboard
      security:
      - bearerAuth: []
      responses:
        '200':
          description: dashboard data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      stats:
                        type: object
                        properties:
                          total_players:
                            type: integer
                          active_players:
                            type: integer
                          total_matches:
                            type: integer
                          wins:
                            type: integer
                          losses:
                            type: integer
                          win_rate:
                            type: number
                            format: float
                          recent_form:
                            type: string
                            example: WWLWW
                          avg_kda:
                            type: number
                            format: float
                          active_goals:
                            type: integer
                          completed_goals:
                            type: integer
                          upcoming_matches:
                            type: integer
                      recent_matches:
                        type: array
                        items:
                          "$ref": "#/components/schemas/Match"
                      upcoming_events:
                        type: array
                      active_goals:
                        type: array
                      roster_status:
                        type: object
                        properties:
                          by_role:
                            type: object
                          by_status:
                            type: object
                          contracts_expiring:
                            type: integer
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
  "/api/v1/dashboard/stats":
    get:
      summary: Get dashboard statistics
      tags:
      - Dashboard
      security:
      - bearerAuth: []
      responses:
        '200':
          description: stats retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      total_players:
                        type: integer
                      active_players:
                        type: integer
                      total_matches:
                        type: integer
                      wins:
                        type: integer
                      losses:
                        type: integer
                      win_rate:
                        type: number
                        format: float
                      recent_form:
                        type: string
                        example: WWLWW
                      avg_kda:
                        type: number
                        format: float
                      active_goals:
                        type: integer
                      completed_goals:
                        type: integer
                      upcoming_matches:
                        type: integer
  "/api/v1/dashboard/activities":
    get:
      summary: Get recent activities
      tags:
      - Dashboard
      security:
      - bearerAuth: []
      responses:
        '200':
          description: activities retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      activities:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            action:
                              type: string
                            entity_type:
                              type: string
                            entity_id:
                              type: string
                              format: uuid
                            user:
                              type: string
                            timestamp:
                              type: string
                              format: date-time
                            changes:
                              type: object
                              nullable: true
                      count:
                        type: integer
  "/api/v1/dashboard/schedule":
    get:
      summary: Get upcoming schedule
      tags:
      - Dashboard
      security:
      - bearerAuth: []
      responses:
        '200':
          description: schedule retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      events:
                        type: array
                      count:
                        type: integer
  "/api/v1/players":
    get:
      summary: List all players
      tags:
      - Players
      security:
      - bearerAuth: []
      parameters:
      - name: page
        in: query
        required: false
        description: Page number
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Items per page
        schema:
          type: integer
      - name: role
        in: query
        required: false
        description: Filter by role
        schema:
          type: string
      - name: status
        in: query
        required: false
        description: Filter by status
        schema:
          type: string
      - name: search
        in: query
        required: false
        description: Search by summoner name or real name
        schema:
          type: string
      responses:
        '200':
          description: players found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      players:
                        type: array
                        items:
                          "$ref": "#/components/schemas/Player"
                      pagination:
                        "$ref": "#/components/schemas/Pagination"
        '401':
          description: unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    post:
      summary: Create a player
      tags:
      - Players
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: player created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      player:
                        "$ref": "#/components/schemas/Player"
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                player:
                  type: object
                  properties:
                    summoner_name:
                      type: string
                    real_name:
                      type: string
                    role:
                      type: string
                      enum:
                      - top
                      - jungle
                      - mid
                      - adc
                      - support
                    status:
                      type: string
                      enum:
                      - active
                      - inactive
                      - benched
                      - trial
                    jersey_number:
                      type: integer
                    birth_date:
                      type: string
                      format: date
                    country:
                      type: string
                  required:
                  - summoner_name
                  - role
  "/api/v1/players/{id}":
    parameters:
    - name: id
      in: path
      description: Player ID
      required: true
      schema:
        type: string
    get:
      summary: Show player details
      tags:
      - Players
      security:
      - bearerAuth: []
      responses:
        '200':
          description: player found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      player:
                        "$ref": "#/components/schemas/Player"
        '404':
          description: player not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
    patch:
      summary: Update a player
      tags:
      - Players
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: player updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      player:
                        "$ref": "#/components/schemas/Player"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                player:
                  type: object
                  properties:
                    summoner_name:
                      type: string
                    real_name:
                      type: string
                    status:
                      type: string
    delete:
      summary: Delete a player
      tags:
      - Players
      security:
      - bearerAuth: []
      responses:
        '200':
          description: player deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  "/api/v1/players/{id}/stats":
    parameters:
    - name: id
      in: path
      description: Player ID
      required: true
      schema:
        type: string
    get:
      summary: Get player statistics
      tags:
      - Players
      security:
      - bearerAuth: []
      responses:
        '200':
          description: statistics retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      player:
                        "$ref": "#/components/schemas/Player"
                      overall:
                        type: object
                      recent_form:
                        type: object
                      champion_pool:
                        type: array
                      performance_by_role:
                        type: array
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authorization token
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
          required:
          - code
          - message
      required:
      - error
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        role:
          type: string
          enum:
          - owner
          - admin
          - coach
          - analyst
          - viewer
        timezone:
          type: string
        language:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - email
      - full_name
      - role
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        region:
          type: string
        tier:
          type: string
          enum:
          - amateur
          - semi_pro
          - professional
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - name
      - region
      - tier
    Player:
      type: object
      properties:
        id:
          type: string
          format: uuid
        summoner_name:
          type: string
        real_name:
          type: string
          nullable: true
        role:
          type: string
          enum:
          - top
          - jungle
          - mid
          - adc
          - support
        status:
          type: string
          enum:
          - active
          - inactive
          - benched
          - trial
        jersey_number:
          type: integer
          nullable: true
        country:
          type: string
          nullable: true
        solo_queue_tier:
          type: string
          nullable: true
        solo_queue_rank:
          type: string
          nullable: true
        solo_queue_lp:
          type: integer
          nullable: true
        current_rank:
          type: string
        win_rate:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - summoner_name
      - role
      - status
    Match:
      type: object
      properties:
        id:
          type: string
          format: uuid
        match_type:
          type: string
          enum:
          - official
          - scrim
          - tournament
        game_start:
          type: string
          format: date-time
        game_duration:
          type: integer
        victory:
          type: boolean
        opponent_name:
          type: string
          nullable: true
        our_score:
          type: integer
          nullable: true
        opponent_score:
          type: integer
          nullable: true
        result:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - match_type
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer
        total_count:
          type: integer
        has_next_page:
          type: boolean
        has_prev_page:
          type: boolean
security:
- bearerAuth: []
